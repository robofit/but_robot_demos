#!/usr/bin/env bash

##############################################################################
##
##  recognizer start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and RECOGNIZER_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="recognizer"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

APP_HOME="`pwd -P`/build/install/recognizer"

CLASSPATH=$APP_HOME/lib/recognizer-0.1.0.jar:$APP_HOME/lib/sphinx4.jar:$APP_HOME/lib/rosjava-0.1.6.jar:$APP_HOME/lib/apache_xmlrpc_client-0.1.6.jar:$APP_HOME/lib/com.springsource.org.apache.commons.net-2.0.0.jar:$APP_HOME/lib/apache_xmlrpc_server-0.1.6.jar:$APP_HOME/lib/rosgraph_msgs-1.9.50.jar:$APP_HOME/lib/tf2_msgs-0.4.9.jar:$APP_HOME/lib/com.springsource.org.apache.commons.logging-1.1.1.jar:$APP_HOME/lib/message_generation-0.1.22.jar:$APP_HOME/lib/geometry_msgs-1.10.2.jar:$APP_HOME/lib/dnsjava-2.1.1.jar:$APP_HOME/lib/guava-12.0.jar:$APP_HOME/lib/apache_xmlrpc_common-0.1.6.jar:$APP_HOME/lib/nav_msgs-1.10.2.jar:$APP_HOME/lib/rosjava_test_msgs-0.1.27.jar:$APP_HOME/lib/ws-commons-util-1.0.1.jar:$APP_HOME/lib/std_msgs-0.5.8.jar:$APP_HOME/lib/actionlib_msgs-1.10.2.jar:$APP_HOME/lib/netty-3.5.2.Final.jar:$APP_HOME/lib/com.springsource.org.apache.commons.codec-1.3.0.jar:$APP_HOME/lib/com.springsource.org.apache.commons.io-1.4.0.jar:$APP_HOME/lib/commons-pool-1.6.jar:$APP_HOME/lib/com.springsource.org.apache.commons.lang-2.4.0.jar:$APP_HOME/lib/gradle_plugins-0.1.22.jar:$APP_HOME/lib/junit-3.8.2.jar:$APP_HOME/lib/jsr305-1.3.9.jar:$APP_HOME/lib/com.springsource.org.apache.commons.httpclient-3.1.0.jar:$APP_HOME/lib/xml-apis-1.0.b2.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# Split up the JVM_OPTS And RECOGNIZER_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $RECOGNIZER_OPTS

echo test:
echo $APP_HOME

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" fit_vut.BC.BC "$@"
